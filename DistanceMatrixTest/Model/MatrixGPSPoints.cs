using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace DistanceMatrixTest.Model
{
    /*
     * Points Generated by: http://www.geomidpoint.com/random/
     */

    public class MatrixGPSPoints
    {
        private int _quantityOfOriginsAndDestinations;

        private List<GPSLatLng> _originPoints = new List<GPSLatLng>();
        private List<GPSLatLng> _destinationPoints = new List<GPSLatLng>();

        private DistDurText[,] _distDurTextMatrix;
        private DistDurValue[,] _distDurValueMatrix;
        
        public int QuantityOfOriginsAndDestinations { get => _quantityOfOriginsAndDestinations; set => _quantityOfOriginsAndDestinations = value; }

        public List<GPSLatLng> OriginPoints { get => _originPoints; set => _originPoints = value; }
        public List<GPSLatLng> DestinationPoints { get => _destinationPoints; set => _destinationPoints = value; }
        
        public DistDurText[,] DistDurTextMatrix { get => _distDurTextMatrix; set => _distDurTextMatrix = value; }
        public DistDurValue[,] DistDurValueMatrix { get => _distDurValueMatrix; set => _distDurValueMatrix = value; }

        public MatrixGPSPoints(int quantityOfOriginsAndDestinations)
        {
            if (quantityOfOriginsAndDestinations > 10 && quantityOfOriginsAndDestinations % 10 != 0)
            {
                Console.WriteLine("If N is major of 10, the number should be divisible by 10");
                Console.ReadKey();
                Environment.Exit(0);
            }

            QuantityOfOriginsAndDestinations = quantityOfOriginsAndDestinations;
            PopulateOriginsAndDestinations(quantityOfOriginsAndDestinations);

            DistDurTextMatrix = new DistDurText[quantityOfOriginsAndDestinations, quantityOfOriginsAndDestinations];
            DistDurValueMatrix = new DistDurValue[quantityOfOriginsAndDestinations, quantityOfOriginsAndDestinations];
        }

        public class GPSLatLng
        {
            private double _latitude;
            private double _longitude;

            public GPSLatLng(double latitude, double longitude)
            {
                this.Latitude = latitude;
                this.Longitude = longitude;
            }

            public GPSLatLng(string latitude, string longitude)
            {
                try
                {
                    this.Latitude = Convert.ToDouble(latitude);
                    this.Longitude = Convert.ToDouble(longitude);
                }
                catch (Exception e)
                {
                    this.Latitude = 0;
                    this.Longitude = 0;

                    Console.WriteLine("Exception, point zero: " + latitude + " - " + longitude);
                }
            }

            public double Latitude { get => _latitude; set => _latitude = value; }
            public double Longitude { get => _longitude; set => _longitude = value; }
        }

        public class DistDurValue
        {
            private double _distance;
            private double _duration;

            public DistDurValue(double distance, double duration)
            {
                this._distance = distance;
                this._duration = duration;
            }

            public double Distance { get => _distance; set => _distance = value; }
            public double Duration { get => _duration; set => _duration = value; }
        }

        public class DistDurText
        {
            private string _distance;
            private string _duration;

            public DistDurText(string distance, string duration)
            {
                this._distance = distance;
                this._duration = duration;
            }

            public string Distance { get => _distance; set => _distance = value; }
            public string Duration { get => _duration; set => _duration = value; }
        }

        /// <summary>
        /// Populate two lists of N GPS points from an internal CSV file that contains 500 random GPS points.
        /// </summary>
        /// <param name="quantityOfOriginsAndDestinations"></param>
        public void PopulateOriginsAndDestinations(int quantityOfOriginsAndDestinations = 10)
        {
            if (quantityOfOriginsAndDestinations > 500)
                quantityOfOriginsAndDestinations = 500;

            int currentQuantity = 0;
            using (var reader = new StreamReader(@"D:\projects\dotNet\DistanceMatrixGPS\DistanceMatrixTest\Data\gps_500_points.csv"))
            {
                while (!reader.EndOfStream)
                {
                    var line = reader.ReadLine();
                    var values = line.Split(",");


                    GPSLatLng gpsLatLng = new GPSLatLng(values[0], values[1]);

                    if (gpsLatLng.Latitude == 0) continue;

                    OriginPoints.Add(gpsLatLng);
                    DestinationPoints.Add(gpsLatLng);

                    ++currentQuantity;

                    if (currentQuantity >= quantityOfOriginsAndDestinations) break;
                }
            }

            Console.WriteLine("Total OriginPoints: {0}", OriginPoints.Count);
            Console.WriteLine("Total DestinationPoints: {0}", DestinationPoints.Count);
        }

        public void PrintDistDurTextMatrix(string _prefixName)
        {
            using (StreamWriter outfile = new StreamWriter(@"D:\output\"+ _prefixName+"DistanceMatrix_N-" + this.QuantityOfOriginsAndDestinations + "_" + DateTime.Now.ToString("yyMMddHHmmss.fff") + ".csv"))
            {
                for (int row = -1; row < QuantityOfOriginsAndDestinations; row++)
                {
                    string content = "";

                    for (int col = -1; col < QuantityOfOriginsAndDestinations; col++)
                    {
                        //Print the destinations in the row 0
                        if (row == -1)
                        {
                            if (col >= 0)
                            {
                                content += ";" + DestinationPoints[col].Latitude + ", " + DestinationPoints[col].Longitude; //For CSV print
                                Console.Write(String.Format("\t{0}", DestinationPoints[col].Latitude + ", " + DestinationPoints[col].Longitude)); //For console print
                            }
                        }
                        else
                        {
                            //Print the origins in the col 0
                            if (col == -1)
                            {
                                content += OriginPoints[row].Latitude + ", " + OriginPoints[row].Longitude + ";"; //For CSV print
                                Console.Write(String.Format("{0}\t", OriginPoints[row].Latitude + ", " + OriginPoints[row].Longitude)); //For console print
                            }
                            else
                            {
                                //Sometime there is an error on a particular element
                                if (DistDurTextMatrix[row, col] != null)
                                {
                                    content += "Dist: " + DistDurTextMatrix[row, col].Distance + " / Dur: " + DistDurTextMatrix[row, col].Duration + ";"; //For CSV print
                                    Console.Write(String.Format("{0}\t", "Dist: " + DistDurTextMatrix[row, col].Distance + " / Dur: " + DistDurTextMatrix[row, col].Duration)); //For console print
                                }
                                else
                                {
                                    content += "Dist: NULL / Dur: NULL;"; //For CSV print
                                    Console.Write(String.Format("{0}\t", "Dist: NULL / Dur: NULL;")); //For console print
                                }
                            }
                        }
                    }
                    //trying to write data to csv
                    outfile.WriteLine(content);
                    Console.WriteLine();
                }
            }
        }
    }
}
